// <auto-generated />
using System;
using IT703_Assignment2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IT703_Assignment2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IT703_Assignment2.Areas.Identity.Data.AccountRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("IT703_Assignment2.Areas.Identity.Data.AccountUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FName");

                    b.Property<string>("Gender");

                    b.Property<string>("LName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("Type");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Agency", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Detail");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.HasKey("ID");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Booking", b =>
                {
                    b.Property<string>("ReferenceNum")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CheckIn");

                    b.Property<DateTime>("CheckOut");

                    b.Property<int>("CheckStatus");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("GuestID");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.Property<string>("Notes");

                    b.Property<int>("NumGuest");

                    b.Property<bool>("Paid");

                    b.Property<bool>("ParkingLot");

                    b.Property<string>("ParkingLotID");

                    b.Property<string>("Phone");

                    b.Property<double>("RoomFee");

                    b.Property<string>("RoomID")
                        .IsRequired();

                    b.Property<double>("restaurantFee");

                    b.HasKey("ReferenceNum");

                    b.HasIndex("GuestID");

                    b.HasIndex("ParkingLotID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.CheckSheet", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Notes");

                    b.Property<string>("ScheduleID");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("ID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("CheckSheets");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Company", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Detail");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Contact", b =>
                {
                    b.Property<string>("contactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("contactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Guest", b =>
                {
                    b.Property<string>("GuestID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyID");

                    b.Property<string>("CompanyID");

                    b.Property<int>("NumAdults");

                    b.Property<int>("NumChildren");

                    b.HasKey("GuestID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.HouseKeeper", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Grade")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("HouseKeepers");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.ParkingLot", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Available");

                    b.Property<string>("BlockNum")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ParkingLot");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdditionFee");

                    b.Property<double>("Amount");

                    b.Property<string>("CardHolder")
                        .IsRequired();

                    b.Property<string>("CardNum")
                        .IsRequired();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("GuestID");

                    b.Property<DateTime>("PaymentDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("PaymentTerm")
                        .IsRequired();

                    b.Property<int>("PaymentType");

                    b.Property<string>("ReferenceNum");

                    b.HasKey("PaymentID");

                    b.HasIndex("GuestID");

                    b.HasIndex("ReferenceNum");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Room", b =>
                {
                    b.Property<string>("RoomID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingReferenceNum");

                    b.Property<string>("Description");

                    b.Property<double>("Price");

                    b.Property<string>("RoomNum")
                        .IsRequired();

                    b.Property<int>("RoomType");

                    b.Property<string>("RoomTypeID");

                    b.Property<int>("Status");

                    b.HasKey("RoomID");

                    b.HasIndex("BookingReferenceNum");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.RoomType", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("ImageName");

                    b.Property<int>("MaxGuests");

                    b.Property<int>("Price");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Schedule", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HouseKeeperID");

                    b.Property<bool>("QualityChecked");

                    b.Property<string>("RoomID");

                    b.HasKey("ID");

                    b.HasIndex("HouseKeeperID");

                    b.HasIndex("RoomID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Booking", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestID");

                    b.HasOne("IT703_Assignment2.Models.ParkingLot")
                        .WithMany("Bookings")
                        .HasForeignKey("ParkingLotID");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.CheckSheet", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.Schedule", "Schedule")
                        .WithMany("CheckSheets")
                        .HasForeignKey("ScheduleID");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Guest", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.Agency", "Agency")
                        .WithMany("Guests")
                        .HasForeignKey("AgencyID");

                    b.HasOne("IT703_Assignment2.Models.Company", "Company")
                        .WithMany("Guests")
                        .HasForeignKey("CompanyID");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Payment", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestID");

                    b.HasOne("IT703_Assignment2.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("ReferenceNum");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Room", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.Booking")
                        .WithMany("Rooms")
                        .HasForeignKey("BookingReferenceNum");

                    b.HasOne("IT703_Assignment2.Models.RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID");
                });

            modelBuilder.Entity("IT703_Assignment2.Models.Schedule", b =>
                {
                    b.HasOne("IT703_Assignment2.Models.HouseKeeper", "HouseKeeper")
                        .WithMany("Schedules")
                        .HasForeignKey("HouseKeeperID");

                    b.HasOne("IT703_Assignment2.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IT703_Assignment2.Areas.Identity.Data.AccountUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
